From 9a41b6af6bfa3828c52bb34480b297425d384747 Mon Sep 17 00:00:00 2001
From: Levi Zim <rsworktech@outlook.com>
Date: Mon, 10 Jun 2024 10:06:27 +0800
Subject: [PATCH] [riscv] avoid cpu probing in li_ptr

CPU probing is an expensive thing to do and we should avoid doing it upon every li_ptr call.

Fixes performance regresion bisected in https://github.com/riscv-forks/electron/issues/1

Change-Id: Ib5ff89b2a730e08de6735123ae60adeffe811ed8
---

diff --git a/src/3rdparty/chromium/v8/AUTHORS b/src/3rdparty/chromium/v8/AUTHORS
index c2fea2c..f0dcf70 100644
--- a/src/3rdparty/chromium/v8/AUTHORS
+++ b/src/3rdparty/chromium/v8/AUTHORS
@@ -182,6 +182,7 @@
 Keyhan Vakil <kvakil@googlecontrib.kvakil.me>
 Kris Selden <kris.selden@gmail.com>
 Kyounga Ra <kyounga@alticast.com>
+Levi Zim <rsworktech@outlook.com>
 Loo Rong Jie <loorongjie@gmail.com>
 Lu Yahan <yahan@iscas.ac.cn>
 Ludovic Mermod <ludovic.mermod@gmail.com>
diff --git a/src/3rdparty/chromium/v8/src/codegen/riscv/assembler-riscv.cc b/src/3rdparty/chromium/v8/src/codegen/riscv/assembler-riscv.cc
index 5c54f46..028e019 100644
--- a/src/3rdparty/chromium/v8/src/codegen/riscv/assembler-riscv.cc
+++ b/src/3rdparty/chromium/v8/src/codegen/riscv/assembler-riscv.cc
@@ -1104,7 +1104,6 @@
 }
 
 void Assembler::li_ptr(Register rd, int64_t imm) {
-  base::CPU cpu;
   // Initialize rd with an address
   // Pointers are 48 bits
   // 6 fixed instructions are generated
