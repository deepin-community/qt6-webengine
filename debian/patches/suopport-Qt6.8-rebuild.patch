--- qt6-webengine-6.6.3.orig/src/core/api/CMakeLists.txt
+++ qt6-webengine-6.6.3/src/core/api/CMakeLists.txt
@@ -57,6 +57,8 @@ qt_internal_add_module(WebEngineCore
         Qt::Quick
     EXTRA_CMAKE_FILES
         "${CMAKE_CURRENT_LIST_DIR}/${INSTALL_CMAKE_NAMESPACE}WebEngineCoreDeploySupport.cmake"
+    NO_GENERATE_CPP_EXPORTS
+    SBOM_INCOMPLETE_3RD_PARTY_DEPENDENCIES
 )
 
 set_target_properties(WebEngineCore PROPERTIES QTWEBENGINEPROCESS_NAME ${qtWebEngineProcessName})
--- qt6-webengine-6.6.3.orig/src/pdf/CMakeLists.txt
+++ qt6-webengine-6.6.3/src/pdf/CMakeLists.txt
@@ -38,8 +38,7 @@ qt_internal_add_module(Pdf
     PUBLIC_LIBRARIES
         Qt::Core
         Qt::Gui
-    GENERATE_CPP_EXPORTS
-    GENERATE_PRIVATE_CPP_EXPORTS
+    SBOM_INCOMPLETE_3RD_PARTY_DEPENDENCIES
 )
 
 add_subdirectory(plugins/imageformats/pdf)
--- qt6-webengine-6.6.3.orig/src/pdf/qpdfdocument_p.h
+++ qt6-webengine-6.6.3/src/pdf/qpdfdocument_p.h
@@ -16,7 +16,7 @@
 //
 
 #include "qpdfdocument.h"
-#include "private/qtpdfexports_p.h"
+#include "qtpdfexports.h"
 
 #include "third_party/pdfium/public/fpdfview.h"
 #include "third_party/pdfium/public/fpdf_dataavail.h"
@@ -38,7 +38,7 @@ public:
 
 class QPdfPageModel;
 
-class Q_PDF_PRIVATE_EXPORT QPdfDocumentPrivate: public FPDF_FILEACCESS, public FX_FILEAVAIL, public FX_DOWNLOADHINTS
+class Q_PDF_EXPORT QPdfDocumentPrivate: public FPDF_FILEACCESS, public FX_FILEAVAIL, public FX_DOWNLOADHINTS
 {
 public:
     QPdfDocumentPrivate();
--- qt6-webengine-6.6.3.orig/src/pdfquick/qquickpdfpageimage.cpp
+++ qt6-webengine-6.6.3/src/pdfquick/qquickpdfpageimage.cpp
@@ -42,7 +42,7 @@ QQuickPdfPageImage::~QQuickPdfPageImage(
 {
     Q_D(QQuickPdfPageImage);
     // cancel any async rendering job that is running on my behalf
-    d->pix.clear();
+    d->pendingPix->clear();
 }
 
 /*!
@@ -98,21 +98,21 @@ void QQuickPdfPageImage::load()
             QQuickImageBase::staticMetaObject.indexOfSlot("requestFinished()");
     }
 
-    d->pix.loadImageFromDevice(qmlEngine(this), carrierFile, url,
+    d->pendingPix->loadImageFromDevice(qmlEngine(this), carrierFile, url,
                                d->sourceClipRect.toRect(), d->sourcesize * d->devicePixelRatio,
                                QQuickImageProviderOptions(), d->currentFrame, d->frameCount);
 
     qCDebug(qLcImg) << "loading page" << d->currentFrame << "of" << d->frameCount
-                    << "from" << carrierFile->fileName() << "status" << d->pix.status();
+                    << "from" << carrierFile->fileName() << "status" << d->pendingPix->status();
 
-    switch (d->pix.status()) {
+    switch (d->pendingPix->status()) {
     case QQuickPixmap::Ready:
         pixmapChange();
-        break;
+	break;
     case QQuickPixmap::Loading:
-        d->pix.connectFinished(this, thisRequestFinished);
-        d->pix.connectDownloadProgress(this, thisRequestProgress);
-        if (d->progress != 0.0) {
+        d->pendingPix->connectFinished(this, thisRequestFinished);
+        d->pendingPix->connectDownloadProgress(this, thisRequestProgress);
+	if (d->progress != 0.0) {
             d->progress = 0.0;
             emit progressChanged(d->progress);
         }
@@ -122,7 +122,7 @@ void QQuickPdfPageImage::load()
         }
         break;
     default:
-        qCDebug(qLcImg) << "unexpected status" << d->pix.status();
+        qCDebug(qLcImg) << "unexpected status" << d->pendingPix->status();
         break;
     }
 }
